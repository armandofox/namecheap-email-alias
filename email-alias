#!/usr/bin/env ruby

require 'bundler'
Bundler.require(:default)

class EmailAlias
  
  def initialize(alias_name)
    @domain = 'armandofox.com'
    @forward_to = 'armandofox@gmail.com'
    @config = {
      sandbox: false,
      client_ip: '52.119.127.64', # a whitelisted IP
      api_username: 'armandofox', # namecheap username
      username: 'armandofox', # namecheap PW
      api_key: 'cf0ec78860d049a6bc1f457be9a58da9',
    }
    @alias_name = alias_name
    @client = NamecheapApi::Client.new(@config)
  end

  private

  def argumentize_aliases(alis)
    args = {}
    alis.each_with_index do |ali,i|
      args["MailBox#{i+1}"] = ali["MailBox"]
      args["ForwardTo#{i+1}"] = ali["ForwardTo"]
    end
    args
  end
  
  public
  
  def get
    response = call_api('namecheap.domains.dns.getEmailForwarding', {DomainName: @domain})
    results = []
    response.doc.css("Forward").each do |elt|
      results.push('MailBox' => elt["mailbox"], 'ForwardTo' => elt.children[0].text)
    end
    results
  end
  
  def create
    existing_aliases = self.get
    existing_aliases.push({'MailBox' => @alias_name, 'ForwardTo' => @forward_to})
    args = { "DomainName" => @domain }.merge(argumentize_aliases(existing_aliases))
    response = call_api('namecheap.domains.dns.setEmailForwarding', args)
  end

  def delete
    existing_aliases = self.get
    existing_aliases = existing_aliases.delete_if { |ali| ali['MailBox'] == @alias_name }
    args = { "DomainName" => @domain }.merge(argumentize_aliases(existing_aliases))
    response = call_api('namecheap.domains.dns.setEmailForwarding', args)
  end

  private

  def call_api(cmd, args)
    resp = @client.call(cmd, args)
    if ((resp.docs.css("Error")[0]["Number"] != '0') rescue nil)
      raise RuntimeError.new(resp.doc.css("Error")[0].children[0].text)
    end
    resp
  end
end

command = ARGV[0]
EmailAlias.new(ARGV[1]).send(command)
