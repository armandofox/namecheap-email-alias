#!/usr/bin/env ruby

require 'bundler'
Bundler.require(:default)

class EmailAlias
  
  def initialize(args)
    @command = args.shift
    @alias_name = args.shift
    @args = args
    @config = YAML.load_file("#{File.dirname(__FILE__)}/config.yml").each_with_object({}) { |(k,v),memo| memo[k.to_sym] = v }
    @domain = @config.delete(:domain)
    @forward_to = @config.delete(:forward_to)
    @client = NamecheapApi::Client.new(@config)
  end

  private

  def argumentize_aliases(alis)
    args = {}
    alis.each_with_index do |ali,i|
      args["MailBox#{i+1}"] = ali["MailBox"]
      args["ForwardTo#{i+1}"] = ali["ForwardTo"]
    end
    args
  end
  
  public

  def go!
    self.send(@command)
  end
  
  def get
    response = call_api('namecheap.domains.dns.getEmailForwarding', {DomainName: @domain})
    results = []
    response.doc.css("Forward").each do |elt|
      results.push('MailBox' => elt["mailbox"], 'ForwardTo' => elt.children[0].text)
    end
    puts results if @command == 'get'
    results
  end
  
  def create
    existing_aliases = self.get
    forward_to = @args[0] || @forward_to
    existing_aliases.push({'MailBox' => @alias_name, 'ForwardTo' => forward_to})
    args = { DomainName: @domain }.merge(argumentize_aliases(existing_aliases))
    response = call_api('namecheap.domains.dns.setEmailForwarding', args)
  end

  def delete
    existing_aliases = self.get
    existing_aliases = existing_aliases.delete_if { |ali| ali['MailBox'] == @alias_name }
    args = { DomainName: @domain }.merge(argumentize_aliases(existing_aliases))
    response = call_api('namecheap.domains.dns.setEmailForwarding', args)
  end

  private

  def call_api(cmd, args)
    resp = @client.call(cmd, args)
    unless (err = resp.doc.css("Errors Error")).empty?
      raise RuntimeError.new(err.text)
    end
    resp
  end
end

unless ARGV.length > 0
  STDERR.puts <<EOHELP or exit
Usage: #{$0} get
       #{$0} create aliasname [forwarder]  # defaults to forward_to in config.yml
       #{$0} delete aliasname
EOHELP
end
EmailAlias.new(ARGV).go!
