#!/usr/bin/env ruby

require 'bundler'
Bundler.require(:default)

class EmailAlias
  
  def initialize(alias_name)
    # @domain = 'armandofox.com'
    @domain = 'foxinthehenhouse.biz'
    @forward_to = 'armandofox@gmail.com'
    @config = {
      sandbox: false,
      client_ip: '52.119.127.64', # a whitelisted IP
      api_username: 'armandofox', # namecheap username
      username: 'armandofox', # namecheap PW
      api_key: 'cf0ec78860d049a6bc1f457be9a58da9',
    }
    @alias_name = alias_name
    @client = NamecheapApi::Client.new(@config)
  end

  def get
    response = call_api('namecheap.domains.dns.getEmailForwarding', {DomainName: @domain})
    results = []
    response.doc.css("Forward").each do |elt|
      results.push('MailBox' => elt["mailbox"], 'ForwardTo' => elt.children[0].text)
    end
    results
  end
  
  def create
    existing_aliases = self.get
    existing_aliases.push({'MailBox' => @alias_name, 'ForwardTo' => @forward_to})
    new_aliases = {
      'MailBox'   => existing_aliases.map { |a| a['MailBox'] },
      'ForwardTo' => existing_aliases.map { |a| a['ForwardTo'] }
    }
    args = { DomainName: @domain }.merge(new_aliases)
    byebug
    response = call_api('namecheap.domains.dns.setEmailForwarding', args)
  end

  def delete
    response = call_api('namecheap.domains.dns.setEmailForwarding', params.merge({ForwardTo: ''}))
  end

  private

  def call_api(cmd, args)
    resp = @client.call(cmd, args)
    if ((resp.docs.css("Error")[0]["Number"] != '0') rescue nil)
      raise RuntimeError.new(resp.doc.css("Error")[0].children[0].text)
    end
    resp
  end

  def params
    params = {
      DomainName: @domain,
      MailBox: "#{@alias_name}@#{@domain}"
    }
  end
end

command = ARGV[0]
EmailAlias.new(ARGV[1]).send(command)
